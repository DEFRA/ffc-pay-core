#!/usr/bin/env bash

set -euo pipefail

# ----------------- Config ----------------- #
config_file="$HOME/.bashrc_setup.conf"

# Load saved inputs if they exist
if [[ -f "$config_file" ]]; then
  # shellcheck source=/dev/null
  source "$config_file"
fi

# Prompt for any missing values
inputEmpty=false

prompt_if_empty() {
  local var_name=$1
  local prompt_msg=$2
  if [[ -z "${!var_name:-}" ]]; then
    read -rp "$prompt_msg" val
    declare -g "$var_name"="$val"
    inputEmpty=true
  fi
}

prompt_if_empty KEYVAULT   "Enter Key Vault name: "
prompt_if_empty EMAIL      "Enter your email: "
prompt_if_empty SUFFIX     "Enter your Service Bus suffix (no leading dash): "

# Output inputs to config file if values are not null
if [[ "$inputEmpty" == true ]]; then
  cat >"$config_file" <<EOF
# Auto-generated on $(date +"%Y-%m-%d %H:%M:%S")
KEYVAULT="${KEYVAULT}"
EMAIL="${EMAIL}"
SUFFIX="${SUFFIX}"
EOF
  echo "💾 Saved configuration to $config_file"
fi

# ----------------- Paths & Backup ----------------- #
timestamp=$(date +%Y%m%d%H%M%S)
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
bashrc="$HOME/.bashrc"
backup="$bashrc.backup.$timestamp"

# ----------------- Spinner & Runner ----------------- #
spinner() {
  local pid=$1 delay=0.1
  local spinstr='|/-\\'
  while kill -0 "$pid" 2>/dev/null; do
    printf " [%c]  " "${spinstr:0:1}"
    spinstr="${spinstr:1}${spinstr:0:1}"
    sleep "$delay"
    printf "\b\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
}

fail_and_restore() {
  echo
  echo "⚠️  Setup failed. Restoring original .bashrc..."
  [[ -f "$backup" ]] && cp "$backup" "$bashrc" && echo "✅ Restored from $backup"
  exit 1
}

run_with_spinner() {
  local desc=$1; shift
  echo "$desc"
  ("$@") &
  local pid=$!
  spinner "$pid"
  wait "$pid" || fail_and_restore
}

trap 'fail_and_restore' ERR

# ----------------- Begin Setup ----------------- #
echo "📦 Backing up existing .bashrc (if any)..."
if [[ -f "$bashrc" ]]; then
  cp "$bashrc" "$backup"
else
  echo "🧾 No existing .bashrc found."
fi

echo "✅ Copying template .bashrc..."
cp "$script_dir/.bashrc" "$bashrc"

# ----------------- Add User Inputs ----------------- #
inject_inputs() {
  sed -i \
    -e "s|__EMAIL_PLACEHOLDER__|${EMAIL}|g" \
    -e "s|__SUFFIX_PLACEHOLDER__|-${SUFFIX}|g" \
    "$bashrc"
}
run_with_spinner "✍️  Injecting user inputs..." inject_inputs

# ----------------- Fetch & Add Secrets ----------------- #
declare -A secrets=(
  ["__MESSAGE_QUEUE_HOST_PLACEHOLDER__"]="ffc-bashrc-message-queue-host"
  ["__MESSAGE_QUEUE_USER_PLACEHOLDER__"]="ffc-bashrc-message-queue-user"
  ["__MESSAGE_QUEUE_PASSWORD_PLACEHOLDER__"]="ffc-bashrc-message-queue-password"
  ["__AZURE_STORAGE_SHARE_ACCOUNT_NAME_PLACEHOLDER__"]="ffc-bashrc-azure-storage-share-account-name"
  ["__NOTIFY_API_KEY_PLACEHOLDER__"]="ffc-bashrc-notify-api-key-smoke"
  ["__NOTIFY_API_KEY_LETTER_PLACEHOLDER__"]="ffc-bashrc-notify-api-key-letter-test"
  ["__NOTIFY_EMAIL_TEMPLATE_KEY_PLACEHOLDER__"]="ffc-bashrc-notify-email-template-key-local"
  ["__POSTGRES_USERNAME_PLACEHOLDER__"]="ffc-bashrc-postgres-username"
  ["__POSTGRES_PASSWORD_PLACEHOLDER__"]="ffc-bashrc-postgres-password"
)

fetch_secrets() {
  for placeholder in "${!secrets[@]}"; do
    local name=${secrets[$placeholder]}
    value=$(az keyvault secret show \
      --vault-name "$KEYVAULT" \
      --name "$name" \
      --query value -o tsv 2>/dev/null) || {
        echo "❌ Secret '$name' not found in Key Vault '$KEYVAULT'."
        return 1
      }
    sed -i "s|$placeholder|$value|g" "$bashrc"
  done
}
run_with_spinner "🔐 Fetching and injecting secrets from Key Vault..." fetch_secrets

# ----------------- Source .bashrc and Cleanup trap ----------------- #
trap - ERR
echo "🔄 Sourcing updated .bashrc..."
source "$bashrc"

echo "🎉 Setup complete. .bashrc has been updated."
